<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <title>Korex StyleHub</title>
    <meta content="width=device-width, initial-scale=1.0" name="viewport">
    <meta content="Korex StyleHub" name="keywords">
    <meta content="Korex StyleHub" name="description">

    <!-- Favicon -->
    <link href="../../img/logo.PNG" rel="icon">

    <!-- Google Web Fonts -->
    <link rel="preconnect" href="https://fonts.gstatic.com">
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">  

    <!-- Font Awesome -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.10.0/css/all.min.css" rel="stylesheet">

    <!-- Libraries Stylesheet -->
    <link href="../../lib/owlcarousel/assets/owl.carousel.min.css" rel="stylesheet">

    <!-- Customized Bootstrap Stylesheet -->
    <link href="../../css/style.css" rel="stylesheet">
    <link href="../../css/landingPage.css" rel="stylesheet">

</head>

<body>
   
 <!-- Navbar Start -->
 <%- include (`../../partials/authHeader`); -%>
 <!-- Navbar End -->

 
 <div class="container mt-3">
    <form id="merchantRegistrationForm" action="/auth/merchant/merchantRegistrationPost" method="post">
        <div class="row jumbotron box8">
            <div class="col-sm-12 mx-t3 mb-4">
                <h2 class="text-center text-infos">Merchant Registeration</h2>
            </div> 
  
            <div class="col-sm-6 form-group">
                <label for="name-f">First Name</label>
                <input type="text" class="form-control" name="merchantFirstName" placeholder="Enter your first name.">
                <div id="merchantFirstNameError" class="error"></div>
            </div>
            <div class="col-sm-6 form-group">
                <label for="name-l">Last name</label>
                <input type="text" class="form-control" name="merchantLastName" placeholder="Enter your last name." >
                <div id="merchantLastNameError" class="error"></div>
            </div>
            <div class="col-sm-6 form-group">
                <label for="email">Email</label>
                <input type="email" class="form-control" name="merchantEmail" placeholder="Enter your email.">
                <div id="merchantEmailError" class="error"></div>
            </div>
            <div class="col-sm-6 form-group">
                <label for="pass">Phone Number</label>
                <input type="text" name="merchantPhone" class="form-control" placeholder="Enter your phone number."  >
                <div id="merchantPhoneError" class="error"></div>
            </div>
            <div class="col-sm-6 form-group">
                <label for="address-1">Username</label>
                <input type="text" class="form-control" name="merchantUsername" placeholder="Enter username" >
                <div id="merchantUsernameError" class="error"></div>
            </div>

            <div class="col-sm-6 form-group">
                <label for="address-2">Address</label>
                <input type="address" class="form-control" name="merchantAddress" placeholder="Locality/House/Street no." >
                <div id="merchantAddressError" class="error"></div>
            </div>
            <div class="col-sm-4 form-group">
                <label for="city">City</label>
                <input type="text" class="form-control" name="merchantCity" placeholder="Enter city Name"  >
                <div id="merchantCityError" class="error"></div>
            </div>
            <div class="col-sm-2 form-group">
                <label for="state">State</label>
                <input type="text" class="form-control" name="merchantState" placeholder="Enter state"  >
                <div id="merchantStateError" class="error"></div>
            </div>
            <div class="col-sm-6 form-group">
                <% const countries = [
                "Nigeria", "Ã…land Islands", "Albania", "Bangladesh", "Barbados", "Belarus", "Belgium","French Southern Territories", "Gabon", "Gambia", "Georgia", "Germany", "Ghana", "Gibraltar", "Greece", "Greenland", "Grenada", "Guadeloupe", "Guam", "Guatemala", "Guernsey", "Guinea",  "Honduras", "Hong Kong", "Hungary", "Iceland", "India", "Indonesia", "Iran, Islamic Republic of", "Iraq", "Ireland", "Isle of Man", "Israel", "Italy", "Jamaica", "Japan", "Jersey", "Jordan", "Kazakhstan", "Kenya", "Kiribati", "Korea, Democratic People's Republic of", "Korea, Republic of", "Kuwait", "Kyrgyzstan", "United States", "United States Minor Outlying Islands", "Uruguay", "Uzbekistan", "Vanuatu", "Venezuela", "Viet Nam", "Virgin Islands, British", "Virgin Islands, U.S.", "Wallis and Futuna", "Western Sahara", "Yemen", "Zambia", "Zimbabwe"]; %>
                <label for="Country">Country</label>
                <select class="form-control custom-select browser-default" name="merchantCountry" >
                       <option value="">Select Country</option>
                 <% countries.forEach((country )=> { %>
                    <option value="<%- country  %>"><%- country  %></option>
                    <% }) %>
                </select>
                <div id="merchantCountryError" class="error"></div>
            </div>
            <div class="col-sm-6 form-group">
                <label for="pass">Password</label>
                <input type="Password" name="merchantPassword" class="form-control" placeholder="Enter your password." >
                <div id="merchantPasswordError" class="error"></div>
            </div>
            <div class="col-sm-6 form-group">
                <label for="pass2">Confirm Password</label>
                <input type="Password" name="confirmMerchantPassword" class="form-control" placeholder="Re-enter your password." >
                <div id="confirmMerchantPasswordError" class="error"></div>
            </div>
       
  
            <div class="col-sm-12 form-group mb-0">
                <button id="submitButton"  class="btn btn-primary float-right">Submit</button>
            </div>
  
        </div>
    </form>
  </div>


    <!-- Footer Start -->
    <%- include (`../../partials/authFooter`); -%>
    <!-- Footer End -->

    <script>
        'use strict';

// Function to check if email or username already exists and display response immediately
async function checkExistingMerchant(field, value) {
    try {
        const response = await fetch(`/checkExistingMerchant?field=${field}&value=${encodeURIComponent(value)}`);
        const data = await response.json();
        return data; // Return the response data directly
    } catch (error) {
        console.error('Error checking existing user:', error);
        return { exists: false, message: 'An error occurred while checking existing merchant' };
    }
}

// Add event listeners to email and username input fields
const emailField = document.querySelector('input[name="merchantEmail"]');
const usernameField = document.querySelector('input[name="merchantUsername"]');
const emailErrorElement = document.getElementById('merchantEmailError');
const usernameErrorElement = document.getElementById('merchantUsernameError');

emailField.addEventListener('input', async () => {
const email = emailField.value.trim();
if (email) {
    const { exists, message } = await checkExistingMerchant('merchantEmail', email); // Updated parameter
    if (exists) {
        emailErrorElement.textContent = message;
        console.log(emailErrorElement.textContent);
    } else {
        emailErrorElement.textContent = '';
    }
}
});

usernameField.addEventListener('input', async () => {
const username = usernameField.value.trim();
if (username) {
    const { exists, message } = await checkExistingMerchant('merchantUsername', username); // Updated parameter
    if (exists) {
        usernameErrorElement.textContent = message;
        console.log(usernameErrorElement.textContent);
    } else {
        usernameErrorElement.textContent = '';
    }
}
});




//Registration submission
document.addEventListener('DOMContentLoaded', function () {
    const merchantRegistrationForm = document.getElementById('merchantRegistrationForm');
    merchantRegistrationForm.addEventListener('submit', async function (event) {
        event.preventDefault(); 

        // Change the appearance of the submit button to show a spinner
        const submitButton = document.getElementById('submitButton');
        submitButton.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Submitting...';
        submitButton.disabled = true; // Disable the button while submitting

        try {
            // Get form data 
            const formData = Object.fromEntries(new FormData(merchantRegistrationForm));

            // Send form data to server using AJAX
            const response = await fetch('/auth/merchant/merchantRegistrationPost', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(formData)
            });
            const data = await response.json();


            if (data.success) {
                // If registration successful, redirect or show success message
                const successMessage = encodeURIComponent(data.message);
                window.location.href = `/auth/merchant/merchantEmailVerification?successMessage=${successMessage}`;
            } else {
                // If registration failed, display error messages
                const errors = data.errors;
                errors.forEach(error => {
                    const errorElement = document.getElementById(`${error.key}Error`);
                    if (errorElement) {
                        errorElement.textContent = error.msg;
                    }
                });

                // Check if email or username is already registered
                const emailAlreadyRegistered = errors.some(error => error.msg === 'Email already registered');
                const usernameAlreadyRegistered = errors.some(error => error.msg === 'Username already registered');
                if (emailAlreadyRegistered) {
                    const emailErrorElement = document.getElementById('merchantEmailError');
                    if (emailErrorElement) {
                        emailErrorElement.innerText = 'Email already registered';
                    }
                } else if (usernameAlreadyRegistered) {
                    const usernameErrorElement = document.getElementById('merchantUsernameError');
                    if (usernameErrorElement) {
                        usernameErrorElement.innerText = 'Username already registered';
                    }
                }
            }
        } catch (error) {
            console.error('Error:', error);
            // Handle other errors, like network issues
            alert('An error occurred while processing your request.');
        } finally {
            // Restore the appearance of the submit button
            submitButton.innerHTML = 'Submit';
            submitButton.disabled = false; // Re-enable the button
        }
    });

    // Add event listener to each input field to clear error messages
    const inputFields = document.querySelectorAll('input, select'); // Get all input and select fields
    inputFields.forEach(inputField => {
        inputField.addEventListener('input', () => {
            const fieldName = inputField.name;
            const errorElement = document.getElementById(fieldName + 'Error');
            if (errorElement) {
                // Clear the error message associated with the input field
                errorElement.innerText = '';
            }
        });
    });
});


    </script>



</body>

</html>